# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/events', type: :request do
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:user) { User.create!(email: 'test@test.com', password: 'password') }
  let(:other_user) { User.create!(email: 'someone_else@test.com', password: 'password') }
  let(:target_user_event) { Event.create! valid_attributes }
  let(:other_user_event) { Event.create! someone_elses_event }
  let(:valid_attributes) do
    {
      start_time: Time.current,
      name: 'Any string will do',
      user: user
    }
  end

  let(:someone_elses_event) do
    {
      start_time: Time.current,
      name: 'This does not belong to you',
      user: other_user
    }
  end

  let(:invalid_attributes) do
    {
      name: '',
      start_time: Time.current
    }
  end

  before do
    login_as(user)
    other_user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      target_user_event
      get events_url
      expect(response).to be_successful
    end

    it "does not show someone else's events" do
      target_user_event
      other_user_event
      get events_url
      expect(response.body).to include('Any string will do')
      expect(response.body).not_to include('This does not belong to you')
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      event = target_user_event
      get event_url(event)
      expect(response).to be_successful
    end

    it "does not show someone else's event" do
      event = other_user_event
      expect do
        get event_url(event)
      end.to raise_error CanCan::AccessDenied
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_event_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      event = Event.create! valid_attributes
      get edit_event_url(event)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Event' do
        expect do
          post events_url, params: { event: valid_attributes }
        end.to change(Event, :count).by(1)
      end

      it 'redirects to the created event' do
        post events_url, params: { event: valid_attributes }
        expect(response).to redirect_to(event_url(Event.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Event' do
        expect do
          post events_url, params: { event: invalid_attributes }
        end.to change(Event, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post events_url, params: { event: invalid_attributes }
        # 422 is what's returned when the model fails validations
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:start_time) { Time.current.round + 2.hours.from_now.round }
      let(:new_attributes) do
        { start_time: start_time }
      end

      it 'updates the requested event' do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(event.start_time).to eq start_time
      end

      it 'redirects to the event' do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(response).to redirect_to(event_url(event))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: invalid_attributes }
        # 422 is what's returned when the model fails validations
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested event' do
      event = Event.create! valid_attributes
      expect do
        delete event_url(event)
      end.to change(Event, :count).by(-1)
    end

    it 'redirects to the events list' do
      event = Event.create! valid_attributes
      delete event_url(event)
      expect(response).to redirect_to(events_url)
    end
  end
end
